#!/bin/bash

response=""
CURDUR=""
TMPDIR=""
updateflag="0"
VERSION="1.1.20"

# functions

## core functions

function welcomeprompt {
echo
echo "Welcome to WLinux."
echo "Thank you for supporting sustainable indepdendent open-source development."
echo
echo "WLinux comes with a core set of packages installed. This setup tool allows"
echo "you to install selected packages for WLinux and configure optional settings."
echo
echo "Additional packages are available via the apt package management system."
echo "To learn more about apt you should use man, try typing $ man apt"
echo
}

function continueprompt {
read -r -p "Would you like to continue this setup tool? [Y/n] " response        
if [[ "$response" =~ ^[yY]$ ]] || [[ -z $response ]]
then
    echo "Let's get started."
else
    echo "You may run the script again any time by running: bash /etc/setup"
    exit 0
fi
}

function updatescriptprompt {
read -r -p "Would you like to download and run an updated version of this setup from GitHub? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]] || [[ -z $response ]]
then
    createtmp
    curl https://raw.githubusercontent.com/WhitewaterFoundry/WLinux/master/linux_files/setup | sudo tee /etc/setup
    cleantmp
    clear
    bash /etc/setup -u
    exit 0
else
    echo "Continuing with setup..."
fi
}

function securitypatches {
echo "Security up to date."
}

function createtmp {
    CURDIR=$(pwd)
    TMPDIR=$(mktemp -d)
    cd $TMPDIR
}

function cleantmp {
    cd $CURDIR
    sudo rm -r $TMPDIR  # need to add sudo here because git clones leaves behind write-protected files
}

function byemessage {
    echo "Setup is complete."
    echo
    echo "You may run the script again any time by running: $ bash /etc/setup"
    echo
    echo "You may open a browser link to get help any time by running: $ bash /etc/helpme"
    echo
    echo "Enjoy"
    exit 0
}

## internationalization

function languageprompt {
read -r -p "Would you like to configure additional languages? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo dpkg-reconfigure locales
fi
}

## package meta functions

    # list all package sets and the order they should be presented for optional install here

function installpackages {
echo "Shells:"
installandsetshell
echo "Editors:"
neoviminstall
emacsinstall
echo "Enhancements:"
fzfinstall
explorerintegration
## package set functions
echo "Development Environment:"
pythoninstall
powershellinstall
echo "Cloud Tools:"
azurecliinstall
echo "GUI Applications:"
basicguiinstall
codeinstall
chromeinstall
hidpiconfig
# soundconfig 
}

function updateupgrade {
echo "Checking for and applying updates. Please wait."
sudo apt update
sudo apt upgrade -y
}

## package set functions

### shells

function installandsetshell {
options=("zsh" "fish" "csh")

prompt="Check a shell (again to uncheck, ENTER when done): "
msg=""

shellmenu () {
    echo "The default shell in WLinux is bash. You may select additional shells to install here."
    for i in ${!options[@]}; do 
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    [[ "$msg" ]] && echo "$msg"; :
}

while clear && shellmenu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option: $num"; continue; }
    ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
done

toselect=("bash")
msg="1"
for i in ${!options[@]}; do 
    if [[ "${choices[i]}" ]]
    then
        toselect+=("${options[i]}")
        echo "Installing ${options[i]}..."
        sudo apt install ${options[i]} -y	
	
	if [ ${options[i]} = "zsh" ]
	then
        createtmp
	    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
        cleantmp
	fi
	
	if [ ${options[i]} = "fish" ]
	then
        createtmp
        echo "After fish is installed, type 'exit' and [Enter] to return to the WLinux setup script."
	    curl -L https://get.oh-my.fish | fish
        cleantmp
    fi    
            
    msg="0"
    fi
done
if [[ "$msg" == "1" ]]
then
    echo "No extra shell is selected, continuing setup..."
else
    echo "Set default shell:"
    for i in ${!toselect[@]}; do 
        printf "%3d) %s\n" $((i)) "${toselect[i]}"
    done
    passed="1"
    while [[ "$passed" == "1" ]]
    do
        read -rp "Type a number and enter: " opt
        if [[ "$opt" != *[![:digit:]]* ]] && (( opt < 0 && opt >= ${#toselect[@]} ))
        then
            echo "Invalid option: $opt"
        elif [[ "$opt" == "" ]]
        then
            echo "Value should not be empty."
        else
            passed="0"
        fi
    done
    echo "Setting ${toselect[$opt]} as default..."
    chsh -s $(which ${toselect[$opt]})
fi
}

### editors

function neoviminstall {
read -r -p "Would you like to download and install optional editor neovim? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo apt install neovim -y
fi
}

function emacsinstall {
read -r -p "Would you like to download and install optional editor emacs? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo apt install emacs -y
fi
}

function codeinstall {
read -r -p "Would you like to download and install optional editor Microsoft Code? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    cd $TMPDIR
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg 
    sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg 
    sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list' 
    sudo apt upgrade -y 
    sudo apt update
    sudo apt install code libxss1 libasound2 -y
    cleantmp
fi  
}

### gui apps

function basicguiinstall {

echo "Use of GUI applications on WLinux requires an X server running on Windows."

read -r -p "Would you like to view a link to X410 on the Microsoft Store? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    wslview https://afflnk.microsoft.com/c/1291904/433017/7593?u=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fp%2Fx410%2F9nlp712zmn9q%23activetab%3Dpivot%3Aoverviewtab
fi

read -r -p "Would you like to make sure X410 is running when you open WLinux? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo sh -c 'echo "x410.exe" >> /etc/profile'
fi

read -r -p "Would you like to download and install a base set of libraries for GUI packages? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo apt install xclip gnome-themes-standard gtk2-engines-murrine dbus-x11 -y
fi
}

function chromeinstall {
read -r -p "Would you like to download and install Google Chrome? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 
    sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main " > /etc/apt/sources.list.d/googlechrome.list' 
    sudo apt update
    sudo apt upgrade -y
    sudo apt install google-chrome-stable -y
    sudo rm /etc/apt/sources.list.d/googlechrome.list   #chrome handles it's own apt settings
    cleantmp
fi
}

function addrepos {
read -r -p "Would you like to download and install additional non-free repos? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp

    #non-free
    sudo sh -c 'echo "deb https://deb.debian.org/debian/ stable non-free contrib" > /etc/apt/sources.list'

    # spotify
    # gpg --keyserver keyserver.ubuntu.com --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90 && gpg --export --armor  931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90 | sudo apt-key add -
    # sudo sh -c 'echo "deb http://repository.spotify.com stable non-free" > /etc/apt/sources.list.d/spotify.list'

    # opera
    # wget -O - https://deb.opera.com/archive.key | sudo apt-key add -
    # sudo sh -c 'echo "deb http://deb.opera.com/opera-stable/ stable non-free" > /etc/apt/sources.list.d/opera.list'

    sudo apt-get update -y

    cleantmp
fi
}

function hidpiconfig {
read -r -p "Would you like to configure Qt and GDK for HiDPI displays? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    export QT_SCALE_FACTOR=2
    export GDK_SCALE=2
    sudo sh -c 'echo "QT_SCALE_FACTOR=2" >> /etc/profile'
    sudo sh -c 'echo "GDK_SCALE=2" >> /etc/profile'
fi
}

function soundconfig {
read -r -p "Would you like to configure sound playback for WSL? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    # create temp environment
    createtmp

    # install unzip
    sudo apt-get install unzip -y

    # wget pulseaudio zip
    wget https://api.patrickwu.ml/wlinux/pulseaudio-for-wsl.zip

    # implement a hard-coded sha check here for security, can you think of an elegant way to do so?

    checker=`sha256sum pulseaudio-for-wsl.zip | cut -d" " -f1`
    if [[ "$checker" != "e3c915ee428071b16804fff1662a7523b64216c437f4bfa3814de117df58faa8" ]]
    then
        echo "sha256sum does not match for pulseaudio-for-wsl.zip. Aborted."
        exit 1
    else
        echo "sha256sum matched for pulseaudio-for-wsl.zip. Proceed with Installation..."
    fi

    # create pulseaudio on windows installation folder
    cmd.exe /C 'mkdir C:\PulseAudio'

    # extract to pulseaudio into place
    unzip pulseaudio-for-wsl.zip -d /mnt/c/PulseAudio/

    # wget winsw
    wget http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/2.1.2/winsw-2.1.2-bin.exe

    # sha check on winsw for security
    checker=`sha256sum winsw-2.1.2-bin.exe | cut -d" " -f1`
    if [[ "$checker" != "9f35cdfa6e2204df9a250454aea6c2c45d745168f99425d5236b1d30efdae01f" ]]
    then
        echo "sha256sum does not match for winsw-2.1.2-bin.exe. Aborted."
        exit 1
    else
        echo "sha256sum matched for winsw-2.1.2-bin.exe. Proceed with Installation..."
    fi
        # sha256sum 9f35cdfa6e2204df9a250454aea6c2c45d745168f99425d5236b1d30efdae01f  winsw-2.1.2-bin.exe 

    # copy winsw into place
    cp winsw-2.1.2-bin.exe /mnt/c/PulseAudio/pulseaudio.exe

    # create winsw service xml file
    echo "<service>" >> pulseaudio.xml
    echo "  <id>PulseAudio</id>" >> pulseaudio.xml
    echo "  <name>PulseAudio</name>" >> pulseaudio.xml
    echo "  <description>This service supports sound playback in Windows Subsystem for Linux.</description>" >> pulseaudio.xml
    echo "  <executable>C:\PulseAudio\bin\pulseaudio.exe</executable>" >> pulseaudio.xml
    echo "  <arguments>-D</arguments>" >> pulseaudio.xml
    echo "  <startmode>Automatic</startmode>" >> pulseaudio.xml
    echo "</service>" >> pulseaudio.xml
    sudo cp pulseaudio.xml /mnt/c/PulseAudio/

    # wget elevate
    wget https://github.com/jpassing/elevate/releases/download/1.0/elevate.zip

    # extract elevate into place
    unzip elevate.zip -d /mnt/c/PulseAudio/
    
    # register pulse audio service
    cmd.exe /C "C:\PulseAudio\bin\x64\Release\Elevate.exe C:\PulseAudio\pulseaudio.exe install C:\PulseAudio\pulseaudio.xml"

    # install and configure pulseaudio on WLinux
    sudo apt install pulseaudio -y
    export PULSE_SERVER=tcp:127.0.0.1;
    sudo sh -c 'echo "export PULSE_SERVER=tcp:127.0.0.1;" >> /etc/profile'
    sudo sh -c 'echo "export PULSE_SERVER=tcp:127.0.0.1;" >> /etc/environment'
    
    cleantmp
else
    cmd.exe /C "C:\PulseAudio\bin\x64\Release\Elevate.exe C:\PulseAudio\pulseaudio.exe uninstall C:\PulseAudio\pulseaudio.xml"
fi
}


### dev environments

function pythoninstall {
read -r -p "Would you like to download and install python 3.7, IDLE, and pip package manager? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    sudo apt update
    sudo apt -t testing install build-essential python3.7 python3.7-distutils idle-python3.7 -y
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3 get-pip.py --user --no-warn-script-location
    export PATH="$PATH:/home/~/.local/bin"
    pip3 install -U pip
    cleantmp
fi
}

function powershellinstall {
read -r -p "Would you like to download and install Powershell? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo cp microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    rm microsoft.gpg
    sudo sh -c 'echo "deb https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" > /etc/apt/sources.list.d/powershell.list' 
    sudo apt update
    sudo apt upgrade -y
    sudo apt install powershell -y
    cleantmp
fi
}

### enhancements

function fzfinstall {
read -r -p "Would you like to download and install optional command line finder fzf? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    git clone --depth 1 https://github.com/junegunn/fzf.git
    cd fzf
    ./install
    cleantmp
fi
}

function explorerintegration {
read -r -p "Would you like to enable Windows Explorer shell integration? [y/N] " response     
if [[ "$response" =~ ^[yY]$ ]]
then
    echo "Enabling Windows Explorer shell integration."
    cmd.exe /C 'mkdir C:\Temp\'
    cp /opt/ShellIntegration/Install.reg /mnt/c/Temp/Install.reg
    cmd.exe /C 'Reg import C:\Temp\Install.reg'
    cmd.exe /C 'del C:\Temp\Install.reg'
    cmd.exe /C 'rmdir C:\Temp'
else
    echo "Disabling Windows Explorer shell integration."
    cmd.exe /C 'mkdir C:\Temp\'
    cp /opt/ShellIntegration/Install.reg /mnt/c/Temp/Uninstall.reg
    cmd.exe /C 'Reg import C:\Temp\Uninstall.reg'
    cmd.exe /C 'del C:\Temp\Uninstall.reg'
    cmd.exe /C 'rmdir C:\Temp'
fi
}

### cloud tools

function azurecliinstall {
read -r -p "Would you like to download and install optional Azure cloud command line tools? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo cp microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo chmod 644 /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo bash -c "echo 'deb https://packages.microsoft.com/repos/azure-cli/ stretch main' >> /etc/apt/sources.list.d/azurecli.list"
    sudo apt update 
    sudo apt upgrade -y
    echo "Note: azure-cli install can appear to 'stall' at 16%, it is usually not broken, just taking a long time."
    sudo apt install azure-cli -y
    cleantmp
fi
}

# main

## process update command line flag to detect if running from update script
while [ $1 ]; do
	case $1 in
		-u) updateflag="0";shift;;         ## bash setup -u throws: "setup: line 401: 0=0: command not found"
	esac
done

## setup script

if [[ "$updateflag" == "1" ]]
then
  echo "Continuing with updated script from GitHub."
  updateupgrade
  securitypatches
  installpackages
  byemessage
else
  welcomeprompt
  updatescriptprompt       
  continueprompt
  languageprompt
  updateupgrade
  securitypatches
  installpackages
  byemessage
fi

exit 0
