#!/bin/bash

response=""
CURDUR=""
TMPDIR=""
updateflag="0"
VERSION="1.1.20"

# functions

## core functions

function welcomeprompt {
echo "Welcome to WLinux. Thank you for supporting sustainable indepdendent open source development."
echo
echo "WLinux comes with a core set of packages. This script allows you to install additional sets of curated packages."
echo
}

function continueprompt {
read -r -p "Would you like to continue with this setup script? [Y/n] " response        
if [[ "$response" =~ ^[yY]$ ]] || [[ -z $response ]]
then
    echo "Continuing with setup..."
else
    echo "You may run the script again any time by running: bash /etc/setup"
    exit 0
fi
}

function updatescriptprompt {
read -r -p "Would you like to download and run an updated version of this setup from GitHub? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]] || [[ -z $response ]]
then
    TMPDIR=$(mktemp -d)
    curl https://raw.githubusercontent.com/WhitewaterFoundry/WLinux/master/linux_files/setup | sudo tee /etc/setup
    echo "You may run the script again now by running: bash /etc/setup"
    exit 0
else
    echo "Continuing with setup..."
fi
}

function securitypatches {
echo "Security up to date."
}

function createtmp {
    CURDIR=$(pwd)
    TMPDIR=$(mktemp -d)
    cd $TMPDIR
}

function cleantmp {
    cd $CURDIR
    rm -r $TMPDIR
}

function byemessage {
    echo "Setup is complete."
    echo
    echo "You may run the script again any time by running: $ bash /etc/setup"
    echo 
    echo "To install other packages from Debian repos, type $ sudo apt install <package name>"
    echo
    echo "Enjoy"
    exit 0
}

## internationalization

function languageprompt {
read -r -p "Would you like to configure additional languages? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo dpkg-reconfigure locales
fi
}

## package meta functions

    # list all package sets and the order they should be presented for optional install here

function installpackages {
echo "Shells:"
installandsetshell
echo "Editors:"
neoviminstall
emacsinstall
echo "Enhancements:"
fzfinstall
explorerintegration
## package set functions
echo "Development Environment:"
pythoninstall
powershellinstall
echo "Cloud Tools:"
azurecliinstall
echo "GUI Applications:"
basicguiinstall
codeinstall
chromeinstall
hidpiconfig
soundconfig
}

function updateupgrade {
echo "Checking for and applying updates. Please wait."
sudo apt update
sudo apt upgrade -y
}

## package set functions

### shells

function installandsetshell {
options=("zsh" "fish" "csh")

prompt="Check a shell (again to uncheck, ENTER when done): "
msg=""

shellmenu () {
    echo "The default shell in WLinux is bash. You may select additional shells to install here."
    for i in ${!options[@]}; do 
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    [[ "$msg" ]] && echo "$msg"; :
}

while clear && shellmenu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option: $num"; continue; }
    ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
done

toselect=("bash")
msg="1"
for i in ${!options[@]}; do 
    if [[ "${choices[i]}" ]]
    then
        toselect+=("${options[i]}")
        echo "Installing ${options[i]}..."
        sudo apt install ${options[i]} -y	
	
	if [ ${options[i]} = "zsh" ]
	then
	    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
	fi
	
	if [ ${options[i]} = "fish" ]
	then
	    curl -L https://get.oh-my.fish | fish
    fi    
            
    msg="0"
    fi
done
if [[ "$msg" == "1" ]]
then
    echo "No extra shell is selected, continuing setup..."
else
    echo "Set default shell:"
    for i in ${!toselect[@]}; do 
        printf "%3d) %s\n" $((i)) "${toselect[i]}"
    done
    passed="1"
    while [[ "$passed" == "1" ]]
    do
        read -rp "Type a number and enter: " opt
        if [[ "$opt" != *[![:digit:]]* ]] && (( opt < 0 && opt >= ${#toselect[@]} ))
        then
            echo "Invalid option: $opt"
        elif [[ "$opt" == "" ]]
        then
            echo "Value should not be empty."
        else
            passed="0"
        fi
    done
    echo "Setting ${toselect[$opt]} as default..."
    chsh -s $(which ${toselect[$opt]})
fi
}

### editors

function neoviminstall {
read -r -p "Would you like to download and install optional editor neovim? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo apt install neovim -y
fi
}

function emacsinstall {
read -r -p "Would you like to download and install optional editor emacs? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo apt install emacs -y
fi
}

function codeinstall {
read -r -p "Would you like to download and install optional editor Microsoft Code? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    cd $TMPDIR
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg 
    sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg 
    sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list' 
    sudo apt upgrade -y 
    sudo apt update
    sudo apt install code libxss1 libasound2 -y
    cleantmp
fi  
}

### gui apps

function basicguiinstall {
read -r -p "Would you like to download and install a base set of libraries for GUI packages? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    sudo apt install xclip gnome-themes-standard gtk2-engines-murrine dbus-x11 -y
fi
}

function chromeinstall {
read -r -p "Would you like to download and install Google Chrome? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 
    sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main " > /etc/apt/sources.list.d/googlechrome.list' 
    sudo apt update
    sudo apt upgrade -y
    sudo apt install google-chrome-stable -y
    cleantmp
fi
}

function hidpiconfig {
read -r -p "Would you like to configure Qt and GDK for HiDPI displays (set scaling factor to 2)? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    export QT_SCALE_FACTOR=2
    export GDK_SCALE=2
    sudo sh -c 'echo "QT_SCALE_FACTOR=2" >> /etc/profile'
    sudo sh -c 'echo "GDK_SCALE=2" >> /etc/profile'
fi
}

function soundconfig {
read -r -p "Would you like to configure sound playback for WSL? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then

    # download and install pulseaudio server on c:\

    createtmp

    # install unzip

    sudo apt-get install unzip -y

    # wget zip

    wget https://api.patrickwu.ml/wlinux/pulseaudio-for-wsl.zip

    # implement a hard-coded sha check here for security

    # create windows pulseaudio installation folder
    cmd.exe /C 'mkdir C:\PulseAudio'

    # extract to windows pulseaudio folder
    sudo apt install zip -yes
    unzip pulseaudio-for-wsl.zip -d /mnt/c/PulseAudio/

    # install and configure pulse audio WLinux

    sudo apt install pulseaudio -y

    export PULSE_SERVER=tcp:127.0.0.1;
    sudo echo 'export PULSE_SERVER=tcp:127.0.0.1;' >> /etc/profile

    # add command launching pulse audio server to /etc/profile

    sudo echo 'taskkill.exe /IM pulseaudio.exe /T /F' >> /etc/profile # kill existing daemon if one exists

    sudo echo 'bash -c 'cmd.exe /mnt/c/Temp/PulseAudio/bin/pulseaudio.exe -D' &' >> /etc/profile # still trying to find a way to launch this silently, any ideas?

    cleantmp

fi
}

### dev environments

function pythoninstall {
read -r -p "Would you like to download and install python 3.7, IDLE, and pip package manager? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    sudo apt update
    sudo apt -t testing install build-essential python3.7 python3.7-distutils idle-python3.7 -y
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3 get-pip.py --user --no-warn-script-location
    export PATH="$PATH:/home/~/.local/bin"
    pip3 install -U pip
    cleantmp
fi
}

function powershellinstall {
read -r -p "Would you like to download and install Powershell? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > $BUILDIR/microsoft.gpg
    sudo cp $BUILDIR/microsoft.gpg $TMPDIR/$DIST/etc/apt/trusted.gpg.d/microsoft.gpg
    rm $BUILDIR/microsoft.gpg
    sudo sh -c 'echo "deb https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" > /etc/apt/sources.list.d/powershell.list' 
    sudo apt update
    sudo apt upgrade -y
    sudo apt install powershell -y
    cleantmp
fi
}

### enhancements

function fzfinstall {
read -r -p "Would you like to download and install optional command line finder fzf? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    git clone --depth 1 https://github.com/junegunn/fzf.git
    cd fzf
    ./install
    cleantmp
fi
}

function explorerintegration {
read -r -p "Would you like to enable Windows Explorer shell integration? [y/N] " response     
if [[ "$response" =~ ^[yY]$ ]]
then
    echo "Enabling Windows Explorer shell integration."
    cmd.exe /C 'mkdir C:\Temp\'
    cp /opt/ShellIntegration/Install.reg /mnt/c/Temp/Install.reg
    cmd.exe /C 'Reg import C:\Temp\Install.reg'
    cmd.exe /C 'del C:\Temp\Install.reg'
    cmd.exe /C 'rmdir C:\Temp'
else
    echo "Disabling Windows Explorer shell integration."
    cmd.exe /C 'mkdir C:\Temp\'
    cp /opt/ShellIntegration/Install.reg /mnt/c/Temp/Uninstall.reg
    cmd.exe /C 'Reg import C:\Temp\Uninstall.reg'
    cmd.exe /C 'del C:\Temp\Uninstall.reg'
    cmd.exe /C 'rmdir C:\Temp'
fi
}

### cloud tools

function azurecliinstall {
read -r -p "Would you like to download and install optional Azure cloud command line tools? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo cp microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo chmod 644 /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo bash -c "echo 'deb https://packages.microsoft.com/repos/azure-cli/ stretch main' >> /etc/apt/sources.list.d/azurecli.list"
    sudo apt update 
    sudo apt upgrade -y
    echo "Note: azure-cli install can appear to 'stall' at 16%, it is usually not broken, just taking a long time."
    sudo apt install azure-cli -y
    cleantmp
fi
}


### additional package managers

# for after 1.1.20

function flatpakinstall {
read -r -p "Would you like to download and install Flatpak? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp

    echo "Installing dependencies."
    
    sudo apt install git -y

    sudo apt -t testing install build-essential libcurl4-gnutls-dev libsoup2.4-dev \
      libext2fs-dev autoconf autopoint libtool libgpgme-dev bison \
      liblzma-dev libgirepository1.0-dev libcap-dev libarchive-dev \
      libjson-glib-dev libxau-dev libappstream-glib-dev -y

    echo "Getting and building ostree from source. Please wait."

    git clone https://github.com/ostreedev/ostree.git
    cd ostree
    ./autogen.sh --disable-rofiles-fuse --disable-man --with-curl
    make
    sudo make install
    cd ..

    echo "Getting and building flatpak from source. Please wait."

    git clone https://github.com/flatpak/flatpak.git
    cd flatpak
    git checkout wip/WSL
    ./autogen.sh --disable-system-helper --disable-seccomp --disable-documentation --with-priv-mode=setuid
    make                                # ran into some issues here detecting the just-built ostree libs, do we need to update the path above?
    sudo make install
    cd ..

    echo "Installing flathub repo."

    flatpak remote-add --user flathub https://flathub.org/repo/flathub.flatpakrepo
    
    echo "Flatpak installed."

    echo

    echo "To install Flatpaks: $ flatpak install --user org.gnome.FeedReader"

    echo "To run installed Flatpak: $ flatpak run org.gnome.FeedReader"

    cleantmp
fi    
}

function snapinstall {
read -r -p "Would you like to download and install snapd? [y/N] " response
if [[ "$response" =~ ^[yY]$ ]]
then
    createtmp

    sudo apt-get install dirmngr -y

    gpg --keyserver keyserver.ubuntu.com --recv-key 40976EAF437D05B5 && gpg --export --armor 40976EAF437D05B5 | sudo apt-key add -
    gpg --keyserver keyserver.ubuntu.com --recv-key 3B4FE6ACC0B21F32 && gpg --export --armor 3B4FE6ACC0B21F32 | sudo apt-key add -
    sudo bash -c "echo 'deb deb http://archive.ubuntu.com/ubuntu/ trusty main' >> /etc/apt/sources.list.d/snapd.list"
    sudo apt update
    sudo apt upgrade -yes
    sudo apt -t trusty install systemd-shim snapd -y
    snap install hello                 # need to find a away to launch snapd in the background from /etc/profile when this is enabled

    cleantmp
fi
}

# main

## process update command line flag to detect if running from update script
while [ $1 ]; do
	case $1 in
		-u) $updateflag="0";shift;;
	esac
done

## setup script

if [[ "$updateflag" == "1" ]]
then
  echo "Continuing with updated script from GitHub."
  updateupgrade
  securitypatches
  installpackages
  byemessage
else
  welcomeprompt
  #updatescriptprompt       # let's get the rest of the script working flawlessly and then work this out
  continueprompt
  languageprompt
  updateupgrade
  securitypatches
  installpackages
  byemessage
fi

exit 0
